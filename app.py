import streamlit as st
import google.generativeai as genai
import os

# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo que aparece na aba do navegador e o √≠cone.
st.set_page_config(
    page_title="Tutor do Paradoxo de Monty Hall",
    page_icon="üêê",
    layout="centered",
)

# --- T√≠tulos e Cabe√ßalho ---
# T√≠tulo principal exibido na p√°gina.
st.title("ü§ñ Chatbot Tutor: O Paradoxo de Monty Hall")
st.caption("Um assistente virtual para ajudar a entender por que trocar de porta √© a melhor estrat√©gia.")

# --- Configura√ß√£o da API do Gemini ---
# A forma mais segura de gerenciar chaves de API no Streamlit √© usando st.secrets.
# O c√≥digo tentar√° obter a chave de st.secrets. Se n√£o encontrar, ele exibe uma mensagem de erro.
try:
    api_key = st.secrets["GEMINI_API_KEY"]
except (FileNotFoundError, KeyError):
    st.error("Chave de API do Gemini n√£o encontrada. Configure-a em 'Settings > Secrets' no seu app Streamlit.")
    st.stop()

genai.configure(api_key=api_key)

# --- Instru√ß√µes do Modelo (System Prompt) ---
# Esta √© a parte mais importante. Define a "personalidade" e as regras do chatbot.
# O modelo seguir√° estas instru√ß√µes em todas as intera√ß√µes.
system_instruction = """
Voc√™ √© um tutor amig√°vel e paciente, especialista no Paradoxo de Monty Hall. Seu m√©todo de ensino √© socr√°tico, ou seja, voc√™ guia os alunos com perguntas em vez de dar respostas diretas.

Suas regras s√£o:
1.  **Nunca revele a resposta final** (que trocar de porta aumenta a probabilidade de ganhar de 1/3 para 2/3). Seu objetivo √© fazer o aluno chegar a essa conclus√£o sozinho.
2.  **Comece a conversa** se apresentando e explicando o problema de forma simples: H√° 3 portas. Atr√°s de uma h√° um carro (pr√™mio) e, atr√°s das outras duas, bodes (nada). O jogador escolhe uma porta. Voc√™, como apresentador, abre uma das outras duas portas, revelando um bode. Ent√£o, voc√™ oferece ao jogador a chance de trocar sua escolha inicial pela outra porta fechada. A pergunta √©: "√â vantajoso trocar?"
3.  **Use a analogia das 100 portas** se o aluno estiver com dificuldade. Descreva o cen√°rio: "Imagine 100 portas. Voc√™ escolhe uma (chance de 1/100). Eu abro 98 portas que t√™m bodes. Sobram a sua porta original e uma outra. Voc√™ ainda acha que a sua porta tem a mesma chance que a outra, que agora concentra a probabilidade de 99/100?"
4.  **Seja encorajador.** Se o aluno der uma resposta incorreta, n√£o diga "errado". Em vez disso, use frases como: "Entendo seu racioc√≠nio, mas vamos pensar por outro √¢ngulo..." ou "Essa √© uma intui√ß√£o comum. Que tal analisarmos as probabilidades?".
5.  **Mantenha as respostas curtas e focadas** em uma √∫nica pergunta ou conceito por vez para n√£o sobrecarregar o aluno.
"""

# --- Inicializa√ß√£o do Modelo e do Chat ---
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    system_instruction=system_instruction
)

# O Streamlit recarrega o script a cada intera√ß√£o.
# Usamos st.session_state para manter o hist√≥rico do chat salvo entre as recargas.
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

# --- Exibi√ß√£o do Hist√≥rico da Conversa ---
# Percorre o hist√≥rico salvo e exibe cada mensagem na tela.
for message in st.session_state.chat.history:
    role = "user" if message.role == "user" else "assistant"
    with st.chat_message(role):
        st.markdown(message.parts[0].text)

# --- Entrada do Usu√°rio ---
# Cria a caixa de entrada de texto no final da p√°gina.
if prompt := st.chat_input("Fa√ßa sua pergunta ou responda ao tutor..."):
    # Exibe a mensagem do usu√°rio na tela.
    with st.chat_message("user"):
        st.markdown(prompt)

    # Envia a mensagem para a API do Gemini e aguarda a resposta.
    try:
        response = st.session_state.chat.send_message(prompt)
        # Exibe a resposta do chatbot.
        with st.chat_message("assistant"):
            st.markdown(response.text)
    except Exception as e:
        # Exibe uma mensagem de erro amig√°vel se a comunica√ß√£o com a API falhar.
        st.error(f"Ocorreu um erro ao processar sua mensagem: {e}")
